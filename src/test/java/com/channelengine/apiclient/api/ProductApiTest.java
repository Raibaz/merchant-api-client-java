/*
 * ChannelEngine API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.channelengine.apiclient.api;

import com.channelengine.apiclient.ApiException;
import com.channelengine.apiclient.model.ChannelProcessedChangesRequest;
import com.channelengine.apiclient.model.CollectionOfChannelOfferResponse;
import com.channelengine.apiclient.model.MerchantProductRequest;
import com.channelengine.apiclient.model.ModelApiResponse;
import com.channelengine.apiclient.model.SingleOfChannelProductChangesResponse;
import com.channelengine.apiclient.model.SingleOfMerchantProductResponse;
import com.channelengine.apiclient.model.SingleOfProductCreationResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Ignore
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    
    /**
     * Channel: Acknowledge Product Data Changes
     *
     * For channels.                This endpoint should be called after a call to GET &#39;v2/products/data&#39;. After a call to  this endpoint ChannelEngine &#39;knows&#39; which products are known to the channel (and the last  time they have been updated) and is therefore able to only return the products  that really have changed since the last call to POST &#39;v2/products/data&#39;.  The supplied ChannelReturnNo will be saved  in our database and is supposed to be unique, the &#39;Updated&#39; and &#39;Removed&#39;  fields consist of ChannelReferences which are sent in a previous call  within the field &#39;Created&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productAcknowledgeDataChangesTest() throws ApiException {
        ChannelProcessedChangesRequest changes = null;
        ModelApiResponse response = api.productAcknowledgeDataChanges(changes);

        // TODO: test validations
    }
    
    /**
     * Channel: Acknowledge Product Offer Changes
     *
     * For channels.                After a call to GET &#39;v2/products/offers&#39; this endpoint should be called with the  ChannelReturnNo of the products that are successfully updated.  Please see &#39;v2/products/data&#39; and &#39;v2/products/data&#39; for documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productAcknowledgeOfferChangesTest() throws ApiException {
        List<String> changes = null;
        ModelApiResponse response = api.productAcknowledgeOfferChanges(changes);

        // TODO: test validations
    }
    
    /**
     * Merchant: Create Product
     *
     * For merchants.    Create a product. The parent serves as the &#39;base&#39; product of the children.  For example, the children could be different sizes or colors of the parent product.  For channels where every size and color are different products this does not make any difference  (the children will just be sent separately, while ignoring the parent).  But there are channels where the parent and the children need to be sent together, for example  when there is one product with a list of sizes. In this case all the product information is retrieved  from the parent product while the size list is generated from the children.    Note that the parent itself is a &#39;blueprint&#39; of the child products and we do our best to make sure it  does not end up on the marketplaces itself. Only the children can be purchased.    It&#39;s not possible to nest parent and children more than one level (A parent can have many children,  but any child cannot itself also have children).    The supplied MerchantProductNo needs to be unique.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productCreateTest() throws ApiException {
        List<MerchantProductRequest> products = null;
        SingleOfProductCreationResult response = api.productCreate(products);

        // TODO: test validations
    }
    
    /**
     * Merchant: Delete Product
     *
     * For merchants.    Deactivate a product based on the merchant reference.  Note that we do not really delete a product, as the product  might still be referenced by orders etc. Therefore, the references  used for this product cannot be reused. We do however deactivate the product  which means that it will not be sent to channels.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productDeleteTest() throws ApiException {
        String merchantProductNo = null;
        ModelApiResponse response = api.productDelete(merchantProductNo);

        // TODO: test validations
    }
    
    /**
     * Merchant: Get Product
     *
     * For merchants.    Retrieve a product based on the merchant reference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productGetByMerchantProductNoTest() throws ApiException {
        String merchantProductNo = null;
        SingleOfMerchantProductResponse response = api.productGetByMerchantProductNo(merchantProductNo);

        // TODO: test validations
    }
    
    /**
     * Channel: Get Product Data Changes
     *
     * For channels.    Get all products which have changes since the post http call to POST &#39;v2/products/data&#39;.  The response contains the products which should be created, updated or removed from the channel.  After the products have been received and processed successfully &#39;v2/products/data&#39; should  be called with the merchant references of the products which have been processed (see POST &#39;v2/products/data&#39;).   ChannelEnginewill save this information to make sure that the next call to GET &#39;v2/products/data&#39; only returns the  products that really have changes (and therefore should be created, updated or deleted).  A channel willing to integrate with channelengine should therefore only do the following things:      1. Periodically poll &#39;v2/products/data&#39; for changes.      2. If any products are returned, save, update or remove these products.      3. Send the merchant references of the products that have succesfully been processed      in step 2 to POST &#39;v2/products/data&#39;.       These three simple steps will make sure that the products on the channel will be synchronized   with the products on ChannelEngine. ChannelEngine will use the API key to determine the customer  whose products should be returned. Note that child products are only returned if their parent product  has been acknowledged in a previous transaction. This way ChannelEngine knows the value of   &#39;ChannelParentReference&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productGetDataChangesTest() throws ApiException {
        Integer maxCount = null;
        SingleOfChannelProductChangesResponse response = api.productGetDataChanges(maxCount);

        // TODO: test validations
    }
    
    /**
     * Channel: Get Product Offer Changes
     *
     * For channels.                GET &#39;v2/products/offers&#39; and POST &#39;v2/products/offers&#39; closely resemble GET &#39;v2/products/data&#39; and POST &#39;v2/products/data&#39;. See the &#39;v2/products/data&#39;  endpoints for documentation. The difference between both endpoints is that &#39;v2/products/offers&#39; only returns Price and Stock updates and can (and should)  therefore be called more often to keep this information (which might change frequently) up to date.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productGetOfferChangesTest() throws ApiException {
        CollectionOfChannelOfferResponse response = api.productGetOfferChanges();

        // TODO: test validations
    }
    
}
