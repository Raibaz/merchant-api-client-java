/*
 * ChannelEngine API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.channelengine.apiclient.api;

import com.channelengine.apiclient.ApiCallback;
import com.channelengine.apiclient.ApiClient;
import com.channelengine.apiclient.ApiException;
import com.channelengine.apiclient.ApiResponse;
import com.channelengine.apiclient.Configuration;
import com.channelengine.apiclient.Pair;
import com.channelengine.apiclient.ProgressRequestBody;
import com.channelengine.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.channelengine.apiclient.model.CollectionOfChannelCancellationResponse;
import org.joda.time.DateTime;
import com.channelengine.apiclient.model.MerchantCancellationRequest;
import com.channelengine.apiclient.model.ModelApiResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CancellationApi {
    private ApiClient apiClient;

    public CancellationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CancellationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for cancellationCreate */
    private com.squareup.okhttp.Call cancellationCreateCall(MerchantCancellationRequest cancellation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cancellation;
        
        // create path and map variables
        String localVarPath = "/v2/cancellations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancellationCreateValidateBeforeCall(MerchantCancellationRequest cancellation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cancellation' is set
        if (cancellation == null) {
            throw new ApiException("Missing the required parameter 'cancellation' when calling cancellationCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancellationCreateCall(cancellation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merchant: Create Cancellation
     * For merchants.    Mark (part of) an order as cancelled.
     * @param cancellation  (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelApiResponse cancellationCreate(MerchantCancellationRequest cancellation) throws ApiException {
        ApiResponse<ModelApiResponse> resp = cancellationCreateWithHttpInfo(cancellation);
        return resp.getData();
    }

    /**
     * Merchant: Create Cancellation
     * For merchants.    Mark (part of) an order as cancelled.
     * @param cancellation  (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelApiResponse> cancellationCreateWithHttpInfo(MerchantCancellationRequest cancellation) throws ApiException {
        com.squareup.okhttp.Call call = cancellationCreateValidateBeforeCall(cancellation, null, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merchant: Create Cancellation (asynchronously)
     * For merchants.    Mark (part of) an order as cancelled.
     * @param cancellation  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancellationCreateAsync(MerchantCancellationRequest cancellation, final ApiCallback<ModelApiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancellationCreateValidateBeforeCall(cancellation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for cancellationIndex */
    private com.squareup.okhttp.Call cancellationIndexCall(DateTime createdSince, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/cancellations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (createdSince != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "createdSince", createdSince));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancellationIndexValidateBeforeCall(DateTime createdSince, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createdSince' is set
        if (createdSince == null) {
            throw new ApiException("Missing the required parameter 'createdSince' when calling cancellationIndex(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancellationIndexCall(createdSince, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Channel: Get Cancellations
     * For channels.    Gets all cancellations created since the supplied date.
     * @param createdSince  (required)
     * @return CollectionOfChannelCancellationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionOfChannelCancellationResponse cancellationIndex(DateTime createdSince) throws ApiException {
        ApiResponse<CollectionOfChannelCancellationResponse> resp = cancellationIndexWithHttpInfo(createdSince);
        return resp.getData();
    }

    /**
     * Channel: Get Cancellations
     * For channels.    Gets all cancellations created since the supplied date.
     * @param createdSince  (required)
     * @return ApiResponse&lt;CollectionOfChannelCancellationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionOfChannelCancellationResponse> cancellationIndexWithHttpInfo(DateTime createdSince) throws ApiException {
        com.squareup.okhttp.Call call = cancellationIndexValidateBeforeCall(createdSince, null, null);
        Type localVarReturnType = new TypeToken<CollectionOfChannelCancellationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Channel: Get Cancellations (asynchronously)
     * For channels.    Gets all cancellations created since the supplied date.
     * @param createdSince  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancellationIndexAsync(DateTime createdSince, final ApiCallback<CollectionOfChannelCancellationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancellationIndexValidateBeforeCall(createdSince, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionOfChannelCancellationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
