/*
 * ChannelEngine Merchant API
 * ChannelEngine API for merchants
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.channelengine.merchant.apiclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * MerchantOrderLineResponse
 */

public class MerchantOrderLineResponse {
  /**
   * The status of the order
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("IN_PROGRESS"),
    
    SHIPPED("SHIPPED"),
    
    IN_BACKORDER("IN_BACKORDER"),
    
    MANCO("MANCO"),
    
    IN_COMBI("IN_COMBI"),
    
    CLOSED("CLOSED"),
    
    NEW("NEW"),
    
    RETURNED("RETURNED"),
    
    REQUIRES_CORRECTION("REQUIRES_CORRECTION");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Status")
  private StatusEnum status = null;

  @SerializedName("IsFulfillmentByMarketplace")
  private Boolean isFulfillmentByMarketplace = null;

  @SerializedName("MerchantProductNo")
  private String merchantProductNo = null;

  @SerializedName("Gtin")
  private String gtin = null;

  @SerializedName("UnitVat")
  private BigDecimal unitVat = null;

  @SerializedName("LineTotalInclVat")
  private BigDecimal lineTotalInclVat = null;

  @SerializedName("LineVat")
  private BigDecimal lineVat = null;

  @SerializedName("OriginalUnitPriceInclVat")
  private BigDecimal originalUnitPriceInclVat = null;

  @SerializedName("OriginalUnitVat")
  private BigDecimal originalUnitVat = null;

  @SerializedName("OriginalLineTotalInclVat")
  private BigDecimal originalLineTotalInclVat = null;

  @SerializedName("OriginalLineVat")
  private BigDecimal originalLineVat = null;

  @SerializedName("ChannelProductNo")
  private String channelProductNo = null;

  @SerializedName("Quantity")
  private Integer quantity = null;

  @SerializedName("CancellationRequestedQuantity")
  private Integer cancellationRequestedQuantity = null;

  @SerializedName("UnitPriceInclVat")
  private BigDecimal unitPriceInclVat = null;

  @SerializedName("FeeFixed")
  private BigDecimal feeFixed = null;

  @SerializedName("FeeRate")
  private BigDecimal feeRate = null;

  /**
   * The condition of the product, this can be used to indicate that a product is a second-hand product
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
  public enum ConditionEnum {
    NEW("NEW"),
    
    NEW_REFURBISHED("NEW_REFURBISHED"),
    
    USED_AS_NEW("USED_AS_NEW"),
    
    USED_GOOD("USED_GOOD"),
    
    USED_REASONABLE("USED_REASONABLE"),
    
    USED_MEDIOCRE("USED_MEDIOCRE"),
    
    UNKNOWN("UNKNOWN"),
    
    USED_VERY_GOOD("USED_VERY_GOOD");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionEnum fromValue(String text) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConditionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Condition")
  private ConditionEnum condition = null;

  public MerchantOrderLineResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the order
   * @return status
  **/
  @ApiModelProperty(value = "The status of the order")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public MerchantOrderLineResponse isFulfillmentByMarketplace(Boolean isFulfillmentByMarketplace) {
    this.isFulfillmentByMarketplace = isFulfillmentByMarketplace;
    return this;
  }

   /**
   * Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?
   * @return isFulfillmentByMarketplace
  **/
  @ApiModelProperty(value = "Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?")
  public Boolean isIsFulfillmentByMarketplace() {
    return isFulfillmentByMarketplace;
  }

  public void setIsFulfillmentByMarketplace(Boolean isFulfillmentByMarketplace) {
    this.isFulfillmentByMarketplace = isFulfillmentByMarketplace;
  }

  public MerchantOrderLineResponse merchantProductNo(String merchantProductNo) {
    this.merchantProductNo = merchantProductNo;
    return this;
  }

   /**
   * The unique product reference used by the Merchant (sku)
   * @return merchantProductNo
  **/
  @ApiModelProperty(value = "The unique product reference used by the Merchant (sku)")
  public String getMerchantProductNo() {
    return merchantProductNo;
  }

  public void setMerchantProductNo(String merchantProductNo) {
    this.merchantProductNo = merchantProductNo;
  }

  public MerchantOrderLineResponse gtin(String gtin) {
    this.gtin = gtin;
    return this;
  }

   /**
   * Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine
   * @return gtin
  **/
  @ApiModelProperty(value = "Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine")
  public String getGtin() {
    return gtin;
  }

  public void setGtin(String gtin) {
    this.gtin = gtin;
  }

  public MerchantOrderLineResponse unitVat(BigDecimal unitVat) {
    this.unitVat = unitVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the value of a single unit of the ordered product  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return unitVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the value of a single unit of the ordered product  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public BigDecimal getUnitVat() {
    return unitVat;
  }

  public void setUnitVat(BigDecimal unitVat) {
    this.unitVat = unitVat;
  }

  public MerchantOrderLineResponse lineTotalInclVat(BigDecimal lineTotalInclVat) {
    this.lineTotalInclVat = lineTotalInclVat;
    return this;
  }

   /**
   * The total value of the order line (quantity * unit price) including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return lineTotalInclVat
  **/
  @ApiModelProperty(value = "The total value of the order line (quantity * unit price) including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public BigDecimal getLineTotalInclVat() {
    return lineTotalInclVat;
  }

  public void setLineTotalInclVat(BigDecimal lineTotalInclVat) {
    this.lineTotalInclVat = lineTotalInclVat;
  }

  public MerchantOrderLineResponse lineVat(BigDecimal lineVat) {
    this.lineVat = lineVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return lineVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public BigDecimal getLineVat() {
    return lineVat;
  }

  public void setLineVat(BigDecimal lineVat) {
    this.lineVat = lineVat;
  }

  public MerchantOrderLineResponse originalUnitPriceInclVat(BigDecimal originalUnitPriceInclVat) {
    this.originalUnitPriceInclVat = originalUnitPriceInclVat;
    return this;
  }

   /**
   * The value of a single unit of the ordered product including VAT  (in the currency in which the order was paid for, see CurrencyCode).
   * @return originalUnitPriceInclVat
  **/
  @ApiModelProperty(value = "The value of a single unit of the ordered product including VAT  (in the currency in which the order was paid for, see CurrencyCode).")
  public BigDecimal getOriginalUnitPriceInclVat() {
    return originalUnitPriceInclVat;
  }

  public void setOriginalUnitPriceInclVat(BigDecimal originalUnitPriceInclVat) {
    this.originalUnitPriceInclVat = originalUnitPriceInclVat;
  }

  public MerchantOrderLineResponse originalUnitVat(BigDecimal originalUnitVat) {
    this.originalUnitVat = originalUnitVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the value of a single unit of the ordered product  (in the currency in which the order was paid for, see CurrencyCode).
   * @return originalUnitVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the value of a single unit of the ordered product  (in the currency in which the order was paid for, see CurrencyCode).")
  public BigDecimal getOriginalUnitVat() {
    return originalUnitVat;
  }

  public void setOriginalUnitVat(BigDecimal originalUnitVat) {
    this.originalUnitVat = originalUnitVat;
  }

  public MerchantOrderLineResponse originalLineTotalInclVat(BigDecimal originalLineTotalInclVat) {
    this.originalLineTotalInclVat = originalLineTotalInclVat;
    return this;
  }

   /**
   * The total value of the order line (quantity * unit price) including VAT  (in the currency in which the order was paid for, see CurrencyCode).
   * @return originalLineTotalInclVat
  **/
  @ApiModelProperty(value = "The total value of the order line (quantity * unit price) including VAT  (in the currency in which the order was paid for, see CurrencyCode).")
  public BigDecimal getOriginalLineTotalInclVat() {
    return originalLineTotalInclVat;
  }

  public void setOriginalLineTotalInclVat(BigDecimal originalLineTotalInclVat) {
    this.originalLineTotalInclVat = originalLineTotalInclVat;
  }

  public MerchantOrderLineResponse originalLineVat(BigDecimal originalLineVat) {
    this.originalLineVat = originalLineVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the currency in which the order was paid for, see CurrencyCode).
   * @return originalLineVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the currency in which the order was paid for, see CurrencyCode).")
  public BigDecimal getOriginalLineVat() {
    return originalLineVat;
  }

  public void setOriginalLineVat(BigDecimal originalLineVat) {
    this.originalLineVat = originalLineVat;
  }

  public MerchantOrderLineResponse channelProductNo(String channelProductNo) {
    this.channelProductNo = channelProductNo;
    return this;
  }

   /**
   * The unique order reference used by the channel
   * @return channelProductNo
  **/
  @ApiModelProperty(required = true, value = "The unique order reference used by the channel")
  public String getChannelProductNo() {
    return channelProductNo;
  }

  public void setChannelProductNo(String channelProductNo) {
    this.channelProductNo = channelProductNo;
  }

  public MerchantOrderLineResponse quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * The number of items of the product
   * @return quantity
  **/
  @ApiModelProperty(required = true, value = "The number of items of the product")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public MerchantOrderLineResponse cancellationRequestedQuantity(Integer cancellationRequestedQuantity) {
    this.cancellationRequestedQuantity = cancellationRequestedQuantity;
    return this;
  }

   /**
   * The number of items for which cancellation was requested by the customer.  Some channels allow a customer to cancel an order until it has been shipped.  When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.  Use this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine
   * @return cancellationRequestedQuantity
  **/
  @ApiModelProperty(value = "The number of items for which cancellation was requested by the customer.  Some channels allow a customer to cancel an order until it has been shipped.  When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.  Use this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine")
  public Integer getCancellationRequestedQuantity() {
    return cancellationRequestedQuantity;
  }

  public void setCancellationRequestedQuantity(Integer cancellationRequestedQuantity) {
    this.cancellationRequestedQuantity = cancellationRequestedQuantity;
  }

  public MerchantOrderLineResponse unitPriceInclVat(BigDecimal unitPriceInclVat) {
    this.unitPriceInclVat = unitPriceInclVat;
    return this;
  }

   /**
   * The value of a single unit of the ordered product including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return unitPriceInclVat
  **/
  @ApiModelProperty(required = true, value = "The value of a single unit of the ordered product including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public BigDecimal getUnitPriceInclVat() {
    return unitPriceInclVat;
  }

  public void setUnitPriceInclVat(BigDecimal unitPriceInclVat) {
    this.unitPriceInclVat = unitPriceInclVat;
  }

  public MerchantOrderLineResponse feeFixed(BigDecimal feeFixed) {
    this.feeFixed = feeFixed;
    return this;
  }

   /**
   * A fixed fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.
   * @return feeFixed
  **/
  @ApiModelProperty(value = "A fixed fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.")
  public BigDecimal getFeeFixed() {
    return feeFixed;
  }

  public void setFeeFixed(BigDecimal feeFixed) {
    this.feeFixed = feeFixed;
  }

  public MerchantOrderLineResponse feeRate(BigDecimal feeRate) {
    this.feeRate = feeRate;
    return this;
  }

   /**
   * A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.
   * @return feeRate
  **/
  @ApiModelProperty(value = "A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.")
  public BigDecimal getFeeRate() {
    return feeRate;
  }

  public void setFeeRate(BigDecimal feeRate) {
    this.feeRate = feeRate;
  }

  public MerchantOrderLineResponse condition(ConditionEnum condition) {
    this.condition = condition;
    return this;
  }

   /**
   * The condition of the product, this can be used to indicate that a product is a second-hand product
   * @return condition
  **/
  @ApiModelProperty(value = "The condition of the product, this can be used to indicate that a product is a second-hand product")
  public ConditionEnum getCondition() {
    return condition;
  }

  public void setCondition(ConditionEnum condition) {
    this.condition = condition;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantOrderLineResponse merchantOrderLineResponse = (MerchantOrderLineResponse) o;
    return Objects.equals(this.status, merchantOrderLineResponse.status) &&
        Objects.equals(this.isFulfillmentByMarketplace, merchantOrderLineResponse.isFulfillmentByMarketplace) &&
        Objects.equals(this.merchantProductNo, merchantOrderLineResponse.merchantProductNo) &&
        Objects.equals(this.gtin, merchantOrderLineResponse.gtin) &&
        Objects.equals(this.unitVat, merchantOrderLineResponse.unitVat) &&
        Objects.equals(this.lineTotalInclVat, merchantOrderLineResponse.lineTotalInclVat) &&
        Objects.equals(this.lineVat, merchantOrderLineResponse.lineVat) &&
        Objects.equals(this.originalUnitPriceInclVat, merchantOrderLineResponse.originalUnitPriceInclVat) &&
        Objects.equals(this.originalUnitVat, merchantOrderLineResponse.originalUnitVat) &&
        Objects.equals(this.originalLineTotalInclVat, merchantOrderLineResponse.originalLineTotalInclVat) &&
        Objects.equals(this.originalLineVat, merchantOrderLineResponse.originalLineVat) &&
        Objects.equals(this.channelProductNo, merchantOrderLineResponse.channelProductNo) &&
        Objects.equals(this.quantity, merchantOrderLineResponse.quantity) &&
        Objects.equals(this.cancellationRequestedQuantity, merchantOrderLineResponse.cancellationRequestedQuantity) &&
        Objects.equals(this.unitPriceInclVat, merchantOrderLineResponse.unitPriceInclVat) &&
        Objects.equals(this.feeFixed, merchantOrderLineResponse.feeFixed) &&
        Objects.equals(this.feeRate, merchantOrderLineResponse.feeRate) &&
        Objects.equals(this.condition, merchantOrderLineResponse.condition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, isFulfillmentByMarketplace, merchantProductNo, gtin, unitVat, lineTotalInclVat, lineVat, originalUnitPriceInclVat, originalUnitVat, originalLineTotalInclVat, originalLineVat, channelProductNo, quantity, cancellationRequestedQuantity, unitPriceInclVat, feeFixed, feeRate, condition);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantOrderLineResponse {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isFulfillmentByMarketplace: ").append(toIndentedString(isFulfillmentByMarketplace)).append("\n");
    sb.append("    merchantProductNo: ").append(toIndentedString(merchantProductNo)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    unitVat: ").append(toIndentedString(unitVat)).append("\n");
    sb.append("    lineTotalInclVat: ").append(toIndentedString(lineTotalInclVat)).append("\n");
    sb.append("    lineVat: ").append(toIndentedString(lineVat)).append("\n");
    sb.append("    originalUnitPriceInclVat: ").append(toIndentedString(originalUnitPriceInclVat)).append("\n");
    sb.append("    originalUnitVat: ").append(toIndentedString(originalUnitVat)).append("\n");
    sb.append("    originalLineTotalInclVat: ").append(toIndentedString(originalLineTotalInclVat)).append("\n");
    sb.append("    originalLineVat: ").append(toIndentedString(originalLineVat)).append("\n");
    sb.append("    channelProductNo: ").append(toIndentedString(channelProductNo)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    cancellationRequestedQuantity: ").append(toIndentedString(cancellationRequestedQuantity)).append("\n");
    sb.append("    unitPriceInclVat: ").append(toIndentedString(unitPriceInclVat)).append("\n");
    sb.append("    feeFixed: ").append(toIndentedString(feeFixed)).append("\n");
    sb.append("    feeRate: ").append(toIndentedString(feeRate)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

