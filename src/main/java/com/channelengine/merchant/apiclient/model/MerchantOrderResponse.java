/*
 * ChannelEngine Merchant API
 * ChannelEngine API for merchants
 *
 * OpenAPI spec version: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.channelengine.merchant.apiclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.channelengine.merchant.apiclient.model.Address;
import com.channelengine.merchant.apiclient.model.MerchantOrderLineResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * MerchantOrderResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-02-22T11:13:12.420+01:00")
public class MerchantOrderResponse {
  @SerializedName("Id")
  private Integer id = null;

  @SerializedName("ChannelName")
  private String channelName = null;

  /**
   * Gets or Sets channelOrderSupport
   */
  @JsonAdapter(ChannelOrderSupportEnum.Adapter.class)
  public enum ChannelOrderSupportEnum {
    NONE("NONE"),
    
    ORDERS("ORDERS"),
    
    SPLIT_ORDERS("SPLIT_ORDERS"),
    
    SPLIT_ORDER_LINES("SPLIT_ORDER_LINES");

    private String value;

    ChannelOrderSupportEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelOrderSupportEnum fromValue(String text) {
      for (ChannelOrderSupportEnum b : ChannelOrderSupportEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChannelOrderSupportEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelOrderSupportEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelOrderSupportEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChannelOrderSupportEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ChannelOrderSupport")
  private ChannelOrderSupportEnum channelOrderSupport = null;

  @SerializedName("ChannelOrderNo")
  private String channelOrderNo = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("IN_PROGRESS"),
    
    SHIPPED("SHIPPED"),
    
    IN_BACKORDER("IN_BACKORDER"),
    
    CANCELED("CANCELED"),
    
    MANCO("MANCO"),
    
    IN_COMBI("IN_COMBI"),
    
    CLOSED("CLOSED"),
    
    NEW("NEW"),
    
    RETURNED("RETURNED"),
    
    REQUIRES_CORRECTION("REQUIRES_CORRECTION");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Status")
  private StatusEnum status = null;

  @SerializedName("SubTotalInclVat")
  private Double subTotalInclVat = null;

  @SerializedName("SubTotalVat")
  private Double subTotalVat = null;

  @SerializedName("ShippingCostsVat")
  private Double shippingCostsVat = null;

  @SerializedName("TotalInclVat")
  private Double totalInclVat = null;

  @SerializedName("TotalVat")
  private Double totalVat = null;

  @SerializedName("OriginalSubTotalInclVat")
  private Double originalSubTotalInclVat = null;

  @SerializedName("OriginalSubTotalVat")
  private Double originalSubTotalVat = null;

  @SerializedName("OriginalShippingCostsInclVat")
  private Double originalShippingCostsInclVat = null;

  @SerializedName("OriginalShippingCostsVat")
  private Double originalShippingCostsVat = null;

  @SerializedName("OriginalTotalInclVat")
  private Double originalTotalInclVat = null;

  @SerializedName("OriginalTotalVat")
  private Double originalTotalVat = null;

  @SerializedName("Lines")
  private List<MerchantOrderLineResponse> lines = null;

  @SerializedName("Phone")
  private String phone = null;

  @SerializedName("Email")
  private String email = null;

  @SerializedName("CompanyRegistrationNo")
  private String companyRegistrationNo = null;

  @SerializedName("VatNo")
  private String vatNo = null;

  @SerializedName("PaymentMethod")
  private String paymentMethod = null;

  @SerializedName("ShippingCostsInclVat")
  private Double shippingCostsInclVat = null;

  @SerializedName("CurrencyCode")
  private String currencyCode = null;

  @SerializedName("OrderDate")
  private OffsetDateTime orderDate = null;

  @SerializedName("ChannelCustomerNo")
  private String channelCustomerNo = null;

  @SerializedName("BillingAddress")
  private Address billingAddress = null;

  @SerializedName("ShippingAddress")
  private Address shippingAddress = null;

  @SerializedName("ExtraData")
  private Map<String, String> extraData = null;

  public MerchantOrderResponse id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.
   * @return id
  **/
  @ApiModelProperty(value = "The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public MerchantOrderResponse channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

   /**
   * Get channelName
   * @return channelName
  **/
  @ApiModelProperty(value = "")
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }

  public MerchantOrderResponse channelOrderSupport(ChannelOrderSupportEnum channelOrderSupport) {
    this.channelOrderSupport = channelOrderSupport;
    return this;
  }

   /**
   * Get channelOrderSupport
   * @return channelOrderSupport
  **/
  @ApiModelProperty(value = "")
  public ChannelOrderSupportEnum getChannelOrderSupport() {
    return channelOrderSupport;
  }

  public void setChannelOrderSupport(ChannelOrderSupportEnum channelOrderSupport) {
    this.channelOrderSupport = channelOrderSupport;
  }

  public MerchantOrderResponse channelOrderNo(String channelOrderNo) {
    this.channelOrderNo = channelOrderNo;
    return this;
  }

   /**
   * Get channelOrderNo
   * @return channelOrderNo
  **/
  @ApiModelProperty(value = "")
  public String getChannelOrderNo() {
    return channelOrderNo;
  }

  public void setChannelOrderNo(String channelOrderNo) {
    this.channelOrderNo = channelOrderNo;
  }

  public MerchantOrderResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public MerchantOrderResponse subTotalInclVat(Double subTotalInclVat) {
    this.subTotalInclVat = subTotalInclVat;
    return this;
  }

   /**
   * The total value of the order lines including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return subTotalInclVat
  **/
  @ApiModelProperty(value = "The total value of the order lines including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public Double getSubTotalInclVat() {
    return subTotalInclVat;
  }

  public void setSubTotalInclVat(Double subTotalInclVat) {
    this.subTotalInclVat = subTotalInclVat;
  }

  public MerchantOrderResponse subTotalVat(Double subTotalVat) {
    this.subTotalVat = subTotalVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the order lines  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return subTotalVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the order lines  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public Double getSubTotalVat() {
    return subTotalVat;
  }

  public void setSubTotalVat(Double subTotalVat) {
    this.subTotalVat = subTotalVat;
  }

  public MerchantOrderResponse shippingCostsVat(Double shippingCostsVat) {
    this.shippingCostsVat = shippingCostsVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the shipping fee  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return shippingCostsVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the shipping fee  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public Double getShippingCostsVat() {
    return shippingCostsVat;
  }

  public void setShippingCostsVat(Double shippingCostsVat) {
    this.shippingCostsVat = shippingCostsVat;
  }

  public MerchantOrderResponse totalInclVat(Double totalInclVat) {
    this.totalInclVat = totalInclVat;
    return this;
  }

   /**
   * The total value of the order including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return totalInclVat
  **/
  @ApiModelProperty(value = "The total value of the order including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public Double getTotalInclVat() {
    return totalInclVat;
  }

  public void setTotalInclVat(Double totalInclVat) {
    this.totalInclVat = totalInclVat;
  }

  public MerchantOrderResponse totalVat(Double totalVat) {
    this.totalVat = totalVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the total value of te order  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return totalVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the total value of te order  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public Double getTotalVat() {
    return totalVat;
  }

  public void setTotalVat(Double totalVat) {
    this.totalVat = totalVat;
  }

  public MerchantOrderResponse originalSubTotalInclVat(Double originalSubTotalInclVat) {
    this.originalSubTotalInclVat = originalSubTotalInclVat;
    return this;
  }

   /**
   * The total value of the order lines including VAT  (in the currency in which the order was paid for).
   * @return originalSubTotalInclVat
  **/
  @ApiModelProperty(value = "The total value of the order lines including VAT  (in the currency in which the order was paid for).")
  public Double getOriginalSubTotalInclVat() {
    return originalSubTotalInclVat;
  }

  public void setOriginalSubTotalInclVat(Double originalSubTotalInclVat) {
    this.originalSubTotalInclVat = originalSubTotalInclVat;
  }

  public MerchantOrderResponse originalSubTotalVat(Double originalSubTotalVat) {
    this.originalSubTotalVat = originalSubTotalVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the order lines  (in the currency in which the order was paid for).
   * @return originalSubTotalVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the order lines  (in the currency in which the order was paid for).")
  public Double getOriginalSubTotalVat() {
    return originalSubTotalVat;
  }

  public void setOriginalSubTotalVat(Double originalSubTotalVat) {
    this.originalSubTotalVat = originalSubTotalVat;
  }

  public MerchantOrderResponse originalShippingCostsInclVat(Double originalShippingCostsInclVat) {
    this.originalShippingCostsInclVat = originalShippingCostsInclVat;
    return this;
  }

   /**
   * The shipping fee including VAT  (in the currency in which the order was paid for).
   * @return originalShippingCostsInclVat
  **/
  @ApiModelProperty(value = "The shipping fee including VAT  (in the currency in which the order was paid for).")
  public Double getOriginalShippingCostsInclVat() {
    return originalShippingCostsInclVat;
  }

  public void setOriginalShippingCostsInclVat(Double originalShippingCostsInclVat) {
    this.originalShippingCostsInclVat = originalShippingCostsInclVat;
  }

  public MerchantOrderResponse originalShippingCostsVat(Double originalShippingCostsVat) {
    this.originalShippingCostsVat = originalShippingCostsVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the shipping fee  (in the currency in which the order was paid for).
   * @return originalShippingCostsVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the shipping fee  (in the currency in which the order was paid for).")
  public Double getOriginalShippingCostsVat() {
    return originalShippingCostsVat;
  }

  public void setOriginalShippingCostsVat(Double originalShippingCostsVat) {
    this.originalShippingCostsVat = originalShippingCostsVat;
  }

  public MerchantOrderResponse originalTotalInclVat(Double originalTotalInclVat) {
    this.originalTotalInclVat = originalTotalInclVat;
    return this;
  }

   /**
   * The total value of the order including VAT  (in the currency in which the order was paid for).
   * @return originalTotalInclVat
  **/
  @ApiModelProperty(value = "The total value of the order including VAT  (in the currency in which the order was paid for).")
  public Double getOriginalTotalInclVat() {
    return originalTotalInclVat;
  }

  public void setOriginalTotalInclVat(Double originalTotalInclVat) {
    this.originalTotalInclVat = originalTotalInclVat;
  }

  public MerchantOrderResponse originalTotalVat(Double originalTotalVat) {
    this.originalTotalVat = originalTotalVat;
    return this;
  }

   /**
   * The total amount of VAT charged over the total value of te order  (in the currency in which the order was paid for).
   * @return originalTotalVat
  **/
  @ApiModelProperty(value = "The total amount of VAT charged over the total value of te order  (in the currency in which the order was paid for).")
  public Double getOriginalTotalVat() {
    return originalTotalVat;
  }

  public void setOriginalTotalVat(Double originalTotalVat) {
    this.originalTotalVat = originalTotalVat;
  }

  public MerchantOrderResponse lines(List<MerchantOrderLineResponse> lines) {
    this.lines = lines;
    return this;
  }

  public MerchantOrderResponse addLinesItem(MerchantOrderLineResponse linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<MerchantOrderLineResponse>();
    }
    this.lines.add(linesItem);
    return this;
  }

   /**
   * Get lines
   * @return lines
  **/
  @ApiModelProperty(value = "")
  public List<MerchantOrderLineResponse> getLines() {
    return lines;
  }

  public void setLines(List<MerchantOrderLineResponse> lines) {
    this.lines = lines;
  }

  public MerchantOrderResponse phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @ApiModelProperty(value = "")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public MerchantOrderResponse email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @ApiModelProperty(required = true, value = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public MerchantOrderResponse companyRegistrationNo(String companyRegistrationNo) {
    this.companyRegistrationNo = companyRegistrationNo;
    return this;
  }

   /**
   * Get companyRegistrationNo
   * @return companyRegistrationNo
  **/
  @ApiModelProperty(value = "")
  public String getCompanyRegistrationNo() {
    return companyRegistrationNo;
  }

  public void setCompanyRegistrationNo(String companyRegistrationNo) {
    this.companyRegistrationNo = companyRegistrationNo;
  }

  public MerchantOrderResponse vatNo(String vatNo) {
    this.vatNo = vatNo;
    return this;
  }

   /**
   * Get vatNo
   * @return vatNo
  **/
  @ApiModelProperty(value = "")
  public String getVatNo() {
    return vatNo;
  }

  public void setVatNo(String vatNo) {
    this.vatNo = vatNo;
  }

  public MerchantOrderResponse paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @ApiModelProperty(required = true, value = "")
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public MerchantOrderResponse shippingCostsInclVat(Double shippingCostsInclVat) {
    this.shippingCostsInclVat = shippingCostsInclVat;
    return this;
  }

   /**
   * The shipping fee including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
   * @return shippingCostsInclVat
  **/
  @ApiModelProperty(required = true, value = "The shipping fee including VAT  (in the shop's base currency calculated using the exchange rate at the time of ordering).")
  public Double getShippingCostsInclVat() {
    return shippingCostsInclVat;
  }

  public void setShippingCostsInclVat(Double shippingCostsInclVat) {
    this.shippingCostsInclVat = shippingCostsInclVat;
  }

  public MerchantOrderResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public MerchantOrderResponse orderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
    return this;
  }

   /**
   * Get orderDate
   * @return orderDate
  **/
  @ApiModelProperty(required = true, value = "")
  public OffsetDateTime getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
  }

  public MerchantOrderResponse channelCustomerNo(String channelCustomerNo) {
    this.channelCustomerNo = channelCustomerNo;
    return this;
  }

   /**
   * Get channelCustomerNo
   * @return channelCustomerNo
  **/
  @ApiModelProperty(value = "")
  public String getChannelCustomerNo() {
    return channelCustomerNo;
  }

  public void setChannelCustomerNo(String channelCustomerNo) {
    this.channelCustomerNo = channelCustomerNo;
  }

  public MerchantOrderResponse billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @ApiModelProperty(required = true, value = "")
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }

  public MerchantOrderResponse shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @ApiModelProperty(required = true, value = "")
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  public MerchantOrderResponse extraData(Map<String, String> extraData) {
    this.extraData = extraData;
    return this;
  }

  public MerchantOrderResponse putExtraDataItem(String key, String extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new HashMap<String, String>();
    }
    this.extraData.put(key, extraDataItem);
    return this;
  }

   /**
   * Get extraData
   * @return extraData
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getExtraData() {
    return extraData;
  }

  public void setExtraData(Map<String, String> extraData) {
    this.extraData = extraData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantOrderResponse merchantOrderResponse = (MerchantOrderResponse) o;
    return Objects.equals(this.id, merchantOrderResponse.id) &&
        Objects.equals(this.channelName, merchantOrderResponse.channelName) &&
        Objects.equals(this.channelOrderSupport, merchantOrderResponse.channelOrderSupport) &&
        Objects.equals(this.channelOrderNo, merchantOrderResponse.channelOrderNo) &&
        Objects.equals(this.status, merchantOrderResponse.status) &&
        Objects.equals(this.subTotalInclVat, merchantOrderResponse.subTotalInclVat) &&
        Objects.equals(this.subTotalVat, merchantOrderResponse.subTotalVat) &&
        Objects.equals(this.shippingCostsVat, merchantOrderResponse.shippingCostsVat) &&
        Objects.equals(this.totalInclVat, merchantOrderResponse.totalInclVat) &&
        Objects.equals(this.totalVat, merchantOrderResponse.totalVat) &&
        Objects.equals(this.originalSubTotalInclVat, merchantOrderResponse.originalSubTotalInclVat) &&
        Objects.equals(this.originalSubTotalVat, merchantOrderResponse.originalSubTotalVat) &&
        Objects.equals(this.originalShippingCostsInclVat, merchantOrderResponse.originalShippingCostsInclVat) &&
        Objects.equals(this.originalShippingCostsVat, merchantOrderResponse.originalShippingCostsVat) &&
        Objects.equals(this.originalTotalInclVat, merchantOrderResponse.originalTotalInclVat) &&
        Objects.equals(this.originalTotalVat, merchantOrderResponse.originalTotalVat) &&
        Objects.equals(this.lines, merchantOrderResponse.lines) &&
        Objects.equals(this.phone, merchantOrderResponse.phone) &&
        Objects.equals(this.email, merchantOrderResponse.email) &&
        Objects.equals(this.companyRegistrationNo, merchantOrderResponse.companyRegistrationNo) &&
        Objects.equals(this.vatNo, merchantOrderResponse.vatNo) &&
        Objects.equals(this.paymentMethod, merchantOrderResponse.paymentMethod) &&
        Objects.equals(this.shippingCostsInclVat, merchantOrderResponse.shippingCostsInclVat) &&
        Objects.equals(this.currencyCode, merchantOrderResponse.currencyCode) &&
        Objects.equals(this.orderDate, merchantOrderResponse.orderDate) &&
        Objects.equals(this.channelCustomerNo, merchantOrderResponse.channelCustomerNo) &&
        Objects.equals(this.billingAddress, merchantOrderResponse.billingAddress) &&
        Objects.equals(this.shippingAddress, merchantOrderResponse.shippingAddress) &&
        Objects.equals(this.extraData, merchantOrderResponse.extraData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, channelName, channelOrderSupport, channelOrderNo, status, subTotalInclVat, subTotalVat, shippingCostsVat, totalInclVat, totalVat, originalSubTotalInclVat, originalSubTotalVat, originalShippingCostsInclVat, originalShippingCostsVat, originalTotalInclVat, originalTotalVat, lines, phone, email, companyRegistrationNo, vatNo, paymentMethod, shippingCostsInclVat, currencyCode, orderDate, channelCustomerNo, billingAddress, shippingAddress, extraData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantOrderResponse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    channelOrderSupport: ").append(toIndentedString(channelOrderSupport)).append("\n");
    sb.append("    channelOrderNo: ").append(toIndentedString(channelOrderNo)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subTotalInclVat: ").append(toIndentedString(subTotalInclVat)).append("\n");
    sb.append("    subTotalVat: ").append(toIndentedString(subTotalVat)).append("\n");
    sb.append("    shippingCostsVat: ").append(toIndentedString(shippingCostsVat)).append("\n");
    sb.append("    totalInclVat: ").append(toIndentedString(totalInclVat)).append("\n");
    sb.append("    totalVat: ").append(toIndentedString(totalVat)).append("\n");
    sb.append("    originalSubTotalInclVat: ").append(toIndentedString(originalSubTotalInclVat)).append("\n");
    sb.append("    originalSubTotalVat: ").append(toIndentedString(originalSubTotalVat)).append("\n");
    sb.append("    originalShippingCostsInclVat: ").append(toIndentedString(originalShippingCostsInclVat)).append("\n");
    sb.append("    originalShippingCostsVat: ").append(toIndentedString(originalShippingCostsVat)).append("\n");
    sb.append("    originalTotalInclVat: ").append(toIndentedString(originalTotalInclVat)).append("\n");
    sb.append("    originalTotalVat: ").append(toIndentedString(originalTotalVat)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    companyRegistrationNo: ").append(toIndentedString(companyRegistrationNo)).append("\n");
    sb.append("    vatNo: ").append(toIndentedString(vatNo)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    shippingCostsInclVat: ").append(toIndentedString(shippingCostsInclVat)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    channelCustomerNo: ").append(toIndentedString(channelCustomerNo)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

