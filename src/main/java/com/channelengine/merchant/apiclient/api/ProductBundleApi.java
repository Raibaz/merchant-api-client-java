/*
 * ChannelEngine Merchant API
 * ChannelEngine API for merchants
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.channelengine.merchant.apiclient.api;

import com.channelengine.merchant.apiclient.ApiCallback;
import com.channelengine.merchant.apiclient.ApiClient;
import com.channelengine.merchant.apiclient.ApiException;
import com.channelengine.merchant.apiclient.ApiResponse;
import com.channelengine.merchant.apiclient.Configuration;
import com.channelengine.merchant.apiclient.Pair;
import com.channelengine.merchant.apiclient.ProgressRequestBody;
import com.channelengine.merchant.apiclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.channelengine.merchant.apiclient.model.CollectionOfMerchantProductBundleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductBundleApi {
    private ApiClient apiClient;

    public ProductBundleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductBundleApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for productBundleGetByFilter
     * @param search Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)
     * @param eanList Search products by submitting a list of EAN&#39;s (optional)
     * @param merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productBundleGetByFilterCall(String search, List<String> eanList, List<String> merchantProductNoList, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/productbundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (eanList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "eanList", eanList));
        if (merchantProductNoList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "merchantProductNoList", merchantProductNoList));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productBundleGetByFilterValidateBeforeCall(String search, List<String> eanList, List<String> merchantProductNoList, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = productBundleGetByFilterCall(search, eanList, merchantProductNoList, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get product bundles.  You can get the full product information on bundles from the regular /products endpoint.
     * 
     * @param search Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)
     * @param eanList Search products by submitting a list of EAN&#39;s (optional)
     * @param merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return CollectionOfMerchantProductBundleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionOfMerchantProductBundleResponse productBundleGetByFilter(String search, List<String> eanList, List<String> merchantProductNoList, Integer page) throws ApiException {
        ApiResponse<CollectionOfMerchantProductBundleResponse> resp = productBundleGetByFilterWithHttpInfo(search, eanList, merchantProductNoList, page);
        return resp.getData();
    }

    /**
     * Get product bundles.  You can get the full product information on bundles from the regular /products endpoint.
     * 
     * @param search Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)
     * @param eanList Search products by submitting a list of EAN&#39;s (optional)
     * @param merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @return ApiResponse&lt;CollectionOfMerchantProductBundleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionOfMerchantProductBundleResponse> productBundleGetByFilterWithHttpInfo(String search, List<String> eanList, List<String> merchantProductNoList, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = productBundleGetByFilterValidateBeforeCall(search, eanList, merchantProductNoList, page, null, null);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantProductBundleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get product bundles.  You can get the full product information on bundles from the regular /products endpoint. (asynchronously)
     * 
     * @param search Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)
     * @param eanList Search products by submitting a list of EAN&#39;s (optional)
     * @param merchantProductNoList Search products by submitting a list of MerchantProductNo&#39;s (optional)
     * @param page The page to filter on. Starts at 1. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productBundleGetByFilterAsync(String search, List<String> eanList, List<String> merchantProductNoList, Integer page, final ApiCallback<CollectionOfMerchantProductBundleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productBundleGetByFilterValidateBeforeCall(search, eanList, merchantProductNoList, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionOfMerchantProductBundleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
